1.

The class Movie is stated below. An instance of class Movie represents a film. This class has the following three properties:

title, which is a String representing the title of the movie
studio, which is a String representing the studio that made the movie
rating, which is a String representing the rating of the movie (i.e. PG­13, R, etc)
a) Write a constructor for the class Movie, which takes a String representing the title of the movie, a String representing the studio, and a String representing the rating as its arguments, and sets the respective class properties to these values.

b) The constructor for the class Movie will set the class property rating to "PG" as default when no rating is provided.

c) Write a method getPG, which takes an array of base type Movie as its argument, and returns a new array of only those movies in the input array with a rating of "PG". You may assume the input array is full of Movie instances. The returned array need not be full.

d) Write a piece of code that creates an instance of the class Movie with the title “Casino Royale”, the studio “Eon Productions”, and the rating “PG­13”
=======================================================================================================================================================

Code:
=====
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
        class Movie{

            constructor(title,studio,rating){
this.title = title
this.studio = studio

if(rating == undefined || null)
{
    this.rating = "PG"
}
else{
    this.rating = rating
}
            }

            getPG(arr)
            {
    
  console.log(arr)
let arr1  = []
  for(var i =0;i < arr.length; i++)

  if (arr[i].rating =="PG")
  {
    // console.log(arr[i])
    arr1.push(arr[i])
  }
  console.log(arr1);
}


            }
        // }

        let film1= new Movie("Casino Royale","Eon Productions","PG­13")

        // console.log(film1)
        let film2= new Movie("Movie name2","Production name2")
        let film3= new Movie("Movie name3","Production name3")
        let film4= new Movie("Movie name4","Production name4")


        // console.log(film2)
const array=[film1, film2,film3,film4]
        film1.getPG(array)
    </script>
</body>
</html>

Output:
======

(4) [Movie, Movie, Movie, Movie]0: Movierating: "PG­13"studio: "Eon Productions"title: "Casino Royale"[[Prototype]]: Object1: Movierating: "PG"studio: "Production name2"title: "Movie name2"[[Prototype]]: Object2: Movierating: "PG"studio: "Production name3"title: "Movie name3"[[Prototype]]: Object3: Movierating: "PG"studio: "Production name4"title: "Movie name4"[[Prototype]]: Objectlength: 4[[Prototype]]: Array(0)
Movieclass.html:37 
(3) [Movie, Movie, Movie]0: Movierating: "PG"studio: "Production name2"title: "Movie name2"[[Prototype]]: Object1: Movierating: "PG"studio: "Production name3"title: "Movie name3"[[Prototype]]: Object2: Movierating: "PG"studio: "Production name4"title: "Movie name4"[[Prototype]]: Objectlength: 3[[Prototype]]: Array(0)

2. Convert the UML diagram to typescript class
======================================================

Code:
=====
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
   <script>
    class Circle{

        constructor(radius,color)
        {
            this.radius= radius
            this.color=color
        }

        getRadius(r)
        {
console.log(this.radius)
        }
        getColor(c)
        {
console.log(this.color)
        }
        getArea(r)
        {
console.log((Math.PI*this.radius*this.radius).toFixed(2))
        }
        getCircumference(r)
        {
console.log((2*Math.PI*this.radius).toFixed(2))
        }
   
    }

    let myvalues = new Circle(1.0,"Red")
    myvalues.getRadius();
    myvalues.getColor();
    myvalues.getArea();
    myvalues.getCircumference();

   </script> 
</body>
</html>

Output:
=======
1
Circleclass.html:24 Red
Circleclass.html:28 3.14
Circleclass.html:32 6.28

3. Write a "Person" class to hold all the details
=================================================

Code:
=====
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>

    //write a person class to hold all the details

    class person{
        constructor(name, age, place){
            console.log("Person Class Constructor")
            this.name = name
            this.age = age
            this.place = place

            console.log(this.name, this.age)
        }
    }

        let p1 = new person("Reshma", 27, "Chennai")
console.log(p1)
console.log(`NewUser/ Person ${p1.name} registered successfully from  ${p1.place} location`)

    //destructuring
    
    let{name,age,place} = p1
    console.log(`New user - ${name} with age - ${age} registered successfully from the location -${place}`)
    
    </script>
</body>
</html>

Output:
======

Person Class Constructor
index_Task.html:20 Reshma 25
index_Task.html:25 person
index_Task.html:26 NewUser/ Person Reshma registered successfully from  Chennai location
index_Task.html:31 New user - Reshma with age - 25 registered successfully from the location -Chennai
index_Task.html:62 Live reload enabled.

4. Write a class to calculate Uber Price
========================================

Code:
====
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
class UberPriceCalculator {
  constructor(baseFare, costPerMile, costPerMinute) {
    this.baseFare = baseFare;
    this.costPerMile = costPerMile;
    this.costPerMinute = costPerMinute;
  }

  calculatePrice(distance, duration) {
    const fare = this.baseFare + (this.costPerMile * distance) + (this.costPerMinute * duration);
    return fare;
  }
} 
let priceCalculator = new UberPriceCalculator(10,1.75,2)

const distanceInMiles = 10;
const durationInMinutes = 20;

const totalFare = priceCalculator.calculatePrice(distanceInMiles, durationInMinutes);

console.log(totalFare)
console.log(`The Uber fare for a ${distanceInMiles} mile, ${durationInMinutes} minute ride is Rs.${totalFare}`);


    </script>
</body>
</html>

Output:
=======

67.5
Cal_Uber_Price.html:31 The Uber fare for a 10 mile, 20 minute ride is Rs.67.5


